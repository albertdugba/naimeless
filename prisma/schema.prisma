generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DB_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  password    String
  avatarColor String
  post        Post[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()
  Comment     Comment[]
}

model Post {
  id          Int       @id @default(autoincrement())
  message     String
  published   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()
  author      String
  channelName String?
  photos      Photo[]
  vote        Vote[]
  comments    Comment[]
  user        User?     @relation(fields: [userId], references: [id])
  userId      Int?
}

model Comment {
  id        Int      @id @default(autoincrement())
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
  replies   Reply[]
  commentId Int?
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model Reply {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()
  body      String
  comment   Comment   @relation(fields: [commentId], references: [id])
  commentId Int
}

model Vote {
  id       Int     @id @default(autoincrement())
  postId   Int
  post     Post    @relation(fields: [postId], references: [id])
  isUpvote Boolean
  vote     Int     @default(0)
}

model Photo {
  id                 Int      @id @default(autoincrement())
  url                String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt()
  cloudinaryPublicId String
  width              Int
  height             Int
  post               Post     @relation(fields: [postId], references: [id])
  postId             Int
}
